desc: Example of `stormform`, `stormtable` and `nodeviewer` Elements working together.

optic_minversion: [2, 83, 0]

layout:
  type: default

  elements:
    form-table-viewer--searchbar: { w: 6, h: 3, x: 0, y: 0 }
    form-table-viewer--org-table: { w: 4, h: 23, x: 0, y: 3 }
    form-table-viewer--contact-table: { w: 8, h: 11, x: 4, y: 3 }
    form-table-viewer--host-table: { w: 8, h: 12, x: 4, y: 14 }

elements:
  # A Form with a single text <input>. Any time the <input> changes this Element will
  # fire an `onvars` Event that will contain the current value of the <input> as the `$orgsearch` variable.

  form-table-viewer--searchbar:
    title: Org Name Search
    type: stormform

    # defines the position and dimensions of the Element in the Workflow grid.

    onload:
      - type: sendfocus
        opts:
          field: org-search-field

    opts:
      fields:
        - iden: org-search-field
          type: input
          name: orgsearch

          label: ou:org search

          onchange:
            - type: eventfire
              opts:
                event: onvars
          opts:
            placeholder: ou:org name prefix

  # A Table that will query for *ou:org* Nodes with $orgsearch in their name.
  # The nodes will be rendered in the table with 2 columns, and fire an `onnodes` Event
  # whenever an ou:org is selected.
  form-table-viewer--org-table:
    title: Orgs
    type: stormtable

    # `subs` defines a list of subscriptions to receive `events` from `src`.
    subs:
      - src: form-table-viewer--searchbar
        events: [ onvars ]

    # `events` defines a list of Actions to take onreceiving a particular type of event.
    events:
      onvars:
        - type: storm
          opts:
            query: ou:org:name^=$orgsearch

    opts:
      form: ou:org

      disablemultiselect: true

      # the Actions to execute when a node is selected in the table.
      onselect:
        - type: nodesfire
          opts:
            propagate: true

      columns:
        - type: prop
          opts: { prop: name, width: 70% }

        - type: prop
          opts: { prop: alias, width: 30% }


  # A Table that will pivot from an inbound *ou:org* Node to the
  # related *ps:contact* Nodes and render them.
  form-table-viewer--contact-table:
    title: Org Contacts
    type: stormtable

    subs:
      - src: form-table-viewer--org-table
        events: [ onnodes ]

    events:
      onnodes:
        - type: storm
          opts:
            query: -> ps:contact

    opts:
      form: ps:contact

      columns:
        - type: prop
          opts: { prop: name, width: 200px }
        - type: prop
          opts: { prop: email, width: 250px }
        - type: prop
          opts: { prop: title, width: 285px }
        - type: prop
          opts: { prop: loc, width: 180px }

  # A Table that will pivot from an inbound *ou:org* Node to the
  # related *it:host* Nodes and render them.
  form-table-viewer--host-table:
    title: Org Hosts
    type: stormtable

    subs:
      - src: form-table-viewer--org-table
        events: [ onnodes ]

    events:
      onnodes:
        - type: storm
          opts:
            query: -> it:host

    opts:
      form: it:host

      columns:
        - type: prop
          opts: { prop: name, title: Name, width: 20% }
        - type: prop
          opts: { prop: desc, width: 15% }
        - type: prop
          opts: { prop: manu, width: 10% }
        - type: prop
          opts: { prop: model, width: 30% }
        - type: embed
          opts: { embed: 'os::software::name', width: 25% }
