desc: Example of using the queryeditor Element to populate a storm table

optic_minversion: [2, 83, 0]

debug: true

layout:
  type: cssgrid

  rows: 256px 1fr

  cols: 1fr 1fr

  elements:
    qb-storm--queryeditor: edtr
    qb-storm--table: tabl

  areas: |
    edtr
    tabl

elements:
  qb-storm--queryeditor:
    type: queryeditor

    style:
      border: false

    onload:
      - type: sendfocus

    menu:
      items:
        - text: bar mode
          onclick:
            - type: updatevars
              opts:
                operations:
                  - type: set
                    name: foomode
                    value: bar
        - text: baz mode
          onclick:
            - type: updatevars
              opts:
                operations:
                  - type: set
                    name: foomode
                    value: baz


    opts:
      # this var will always have the current query in the editor and updates when the user makes changes
      outvar: $query

      placeholder: any inet:fqdn storm query

      # specify storm syntax to gain highlighting and autocompletion
      syntax: storm

      onrun:
        - type: storm
          opts:
            queryvar: $query

            # feed the messages from the storm query to the stormtable element
            feed:
              qb-storm--table: true

        - type: toast
          opts:
            title: success
            mesg: query completed

      # toast when the user clicks the spinner to stop the query
      onstop:
        - type: toast
          opts:
            title: warn
            mesg: you stopped the query before it finished

  qb-storm--table:
    type: stormtable

    opts:
      form: inet:fqdn

      columns:
        - type: form
          opts:
            title: inet:fqdn
        - type: prop
          opts:
            prop: issuffix
        - type: prop
          opts:
            prop: iszone
        - type: prop
          opts:
            prop: zone

      # define a menu to be displayed on each row
      menu:
        items:
          - text: Lift Nodes in research
            tooltip: Uses a getvars Action to generate a storm query that will lift the selected Nodes. The UI will then be navigated to the Research tool and the query will be executed.
            onclick:
              # execute a getvars action to generate a query to lift all the selected nodes.
              # selected nodes are automatically inbounded to the storm query.
              - type: getvars
                opts:
                  query: |
                    init {
                      $queries = ([])
                    }

                    $queries.append(
                      $lib.str.format('{form}={valu}', form=$node.form(), valu=$node.repr())
                    )

                    fini {
                      return(({"liftquery": $lib.str.join(' ', $queries)}))
                    }

              # will navigate the user to the Research tool Tabular display mode and execute the query in $liftquery
              - type: researchquery
                opts:
                  queryvar: $liftquery
                  displaymode: table

          # Example of disabling an option based on the node
          - text: only zones
            disabled: not $nodes.0.props.iszone

      onselect:
        - type: toast

          opts:
            title: success
            mesg: selected
